rm(list = ls())
setwd("/Volumes/TOSHIBA Ext/Urotrauma/")
setwd("/Volumes/TOSHIBA Ext/Urotrauma/")
setwd("/Users/david/Research/Urology Research/Urotrauma/Kidney Injury/Nephrectomy for Isolated Renal Injury")
library(haven)
library(dplyr)
library(tidyr)
kidney_table_final <- readRDS(file = "kidney_table_final.rds")
library(labelled)
names(kidney_table_final)
View(kidney_table_final)
unique(kidney_table_final$description2)
unique(kidney_table_final$Description2)
names(mydata)
names(kidney_data_final)
names(kidney_table_final)
kidney_table_final <- kidney_table_final %>%
set_variable_labels(Injury_Description = "Injury Description",
Two_different_injuries = "Two Different Injuries",
YOBIRTH = "Year of Birth",
AGE = "Age",
GENDER = "Gender",
RACE1 = "Race",
YODISCH = "Year of Discharge",
Death_di = "In-Hospital Mortality",
acs_level = "ACS Level",
teaching_status = "Teaching Status",
region = "Region",
beds = "Beds",
exlap = "Exploratory Laparotomy",
exlap_time = "Time to Exploratory Laparotomy",
laparotomy = "Laparotomy",
re_lap = "Repeat Laparotomy",
ct_abdomen = "CT Abdomen",
ct_imaging = "CT Imaging",
renal_arteriography = "Renal Arteriography",
kidney_cath = "Kidney Cath",
kidney_repair = "Kidney Repair",
ureterectomy = "Ureterectomy",
any_kidney_operation = "Any Kidney Operation",
other_kidney_operation = "Other Kidney Operation",
nephrectomy = "Nephrectomy",
internal_abd_injury = "Internal Abdominal Injury",
any_abd_injury = "Any Abdominal Injury",
vascular_injury = "Vascular Injury",
bowel_injury = "Bowel Injury",
spleen_injury = "Spleen Injury",
liver_injury = "Liver Injury",
retroperitoneal_hemorrhage = "Retroperitoneal Hemorrhage",
bladder_injury = "Bladder Injury",
kidney_injury = "Kidney Injury",
adrenal_injury = "Adrenal Injury",
urethra_injury = "Urethra Injury",
gallbladder_injury = "Gallbadder Injury",
appendix_injury = "Appendix Injury",
splenectomy = "Splenectomy",
appy = "Appendectomy",
chole = "Cholecystectomy",
bowel_surgery = "Bowel Surgery")
View(kidney_table_final)
kidney_table_final <- mutate(kidney_table_final, Age_Cat = case_when(
kidney_table_final$AGE>65 ~ "Over 65",
kidney_table_final$AGE<=65 & kidney_table_final$AGE >=0 ~ "65 or Under",
kidney_table_final$AGE==-99 ~ "Unknown",
kidney_table_final$AGE==-2 ~ "Unknown"
))
kidney_table_final <- mutate(kidney_table_final, SBP_Cat = case_when(
kidney_table_final$SBP>=0 & kidney_table_final$SBP<90 ~ "<90",
kidney_table_final$SBP>=90 ~ "90 or higher",
kidney_table_final$SBP<0 ~ "Unknown"
))
kidney_table_final <- mutate(kidney_table_final, ois_4_or_5 = ifelse(
kidney_table_final$Injury_Description %in% c("Kidney - laceration - extending through renal cortex, medulla and collecting system; main renal vessel injury with contained hemorrhage; \nmajor [OIS IV]",
"Kidney - laceration - hilum avulsion; total destruction of organ and its vascular system [OIS V]",
"Kidney - rupture"),1,0))
missing_injury_type <- kidney_table_final %>%
filter(INC_KEY %in% c(kidney_table_final$INC_KEY[kidney_table_final$Type==""],  kidney_table_final$INC_KEY[kidney_table_final$Type=="Other/unspecified"],
kidney_table_final$INC_KEY[kidney_table_final$Type=="Activity Code - Not Valid as a Primary E-Code"]))
length(unique(missing_injury_type$INC_KEY))
length(which(is.na(kidney_table_final$Death_di)))
length(which(is.na(kidney_table_final$FAC_KEY)))
kidney_table_final <- kidney_table_final %>%
filter(!INC_KEY %in% missing_injury_type$INC_KEY)
kidney_table_final <- kidney_table_final %>%
filter(!INC_KEY %in% kidney_table_final$INC_KEY[which(is.na(kidney_table_final$Death_di))])
length(which(kidney_table_final$nephrectomy==1))
length(kidney_table_final$INC_KEY)
length(which(kidney_table_final$nephrectomy==1))/length(kidney_table_final$INC_KEY)
length(which(kidney_table_final[kidney_table_final$nephrectomy==1,]$any_abd_injury==0))/length(kidney_table_final[kidney_table_final$nephrectomy==1,]$INC_KEY)
length(which(kidney_table_final[kidney_table_final$nephrectomy==1,]$internal_abd_injury==0))/length(kidney_table_final[kidney_table_final$nephrectomy==1,]$INC_KEY)
isolated_renal_injuries <- kidney_table_final %>%
filter(INC_KEY %in% kidney_table_final$INC_KEY[kidney_table_final$any_abd_injury==0])
length(isolated_renal_injuries$INC_KEY)
length(isolated_renal_injuries$INC_KEY)/length(kidney_table_final$INC_KEY)
length(which(isolated_renal_injuries$nephrectomy==1))
length(which(isolated_renal_injuries$nephrectomy==1))/length(isolated_renal_injuries$INC_KEY)
nonisolated_renal_injuries <- kidney_table_final %>%
filter(INC_KEY %in% kidney_table_final$INC_KEY[kidney_table_final$any_abd_injury==1])
library(haven); library(dplyr); library(tidyr); library(tidyverse); library(gtsummary); library(gt)
options(gtsummary.print_engine = "gt")
style_pvalue2 <- function (x, digits = 3, prepend_p = FALSE)
{
if (digits == 3) {
p_fmt <- case_when(x > 1 ~ NA_character_, x < 0 ~ NA_character_,
x > 0.999 ~ ">0.99", round(x, 3) >= 0.1 ~ sprintf("%.3f",
x), x >= 0.001 ~ sprintf("%.3f", x), x < 0.001 ~
"<0.001")
}
else if (digits == 2) {
p_fmt <- case_when(x > 1 ~ NA_character_, x < 0 ~ NA_character_,
x > 0.99 ~ ">0.99", round(x, 2) >= 0.2 ~ sprintf("%.2f",
x), round(x, 2) >= 0.1 ~ sprintf("%.2f", x),
x >= 0.001 ~ sprintf("%.3f", x), x < 0.001 ~ "<0.001")
}
else {
stop("'digits' argument must be 2 or 3.")
}
if (prepend_p == TRUE) {
p_fmt <- case_when(is.na(p_fmt) ~ NA_character_, stringr::str_sub(p_fmt,
end = 1L) %in% c("<", ">") ~ paste0("p", p_fmt),
TRUE ~ paste0("p=", p_fmt))
}
return(p_fmt)
}
options(gtsummary.pvalue_fun = function(x) style_pvalue2(x, digits=3))
options(gtsummary.tbl_summary.percent_fun = function(x) sprintf(x * 100, fmt='%#.1f'))
names(mydata)
names(kidney_table_final)
t1 <- kidney_table_final %>%
select(AGE, GENDER, RACE1, Injury_Description, LOSDAYS, Death_di, acs_level,
teaching_status, region, beds, exlap, laparotomy, foley, ct_abdomen, ct_imaging, renal_arteriography, kidney_cath, kidney_repair,
ureterectomy, any_kidney_operation, nephrectomy, other_kidney_operation,
splenectomy, chole, appy, bowel_surgery, vascular_injury, bowel_injury, spleen_injury, liver_injury,
retroperitoneal_hemorrhage, bladder_injury, kidney_injury, adrenal_injury)
t1 <- kidney_table_final %>%
select(AGE, GENDER, RACE1, Injury_Description, LOSDAYS, Death_di, acs_level,
teaching_status, region, beds, exlap, laparotomy, foley, ct_abdomen, ct_imaging, renal_arteriography, kidney_cath, kidney_repair,
ureterectomy, any_kidney_operation, nephrectomy, other_kidney_operation,
splenectomy, chole, appy, bowel_surgery, vascular_injury, bowel_injury, spleen_injury, liver_injury,
retroperitoneal_hemorrhage, bladder_injury, kidney_injury, adrenal_injury) %>%
tbl_summary(by = nephrectomy,
statistic = list(all_continuous() ~ "{mean} ({sd})"), # Mean (SD)
# statistic = list(all_continuous() ~ "{median} ({p25}, {p75})"), # Median (IQR)
digits = list(all_continuous() ~ c(1,1)))
t1 <- kidney_table_final %>%
select(AGE, GENDER, RACE1, Injury_Description, LOSDAYS, Death_di, acs_level,
teaching_status, region, beds, exlap, laparotomy, foley, ct_abdomen, ct_imaging, renal_arteriography, kidney_cath, kidney_repair,
ureterectomy, any_kidney_operation, nephrectomy, other_kidney_operation,
splenectomy, chole, appy, bowel_surgery, vascular_injury, bowel_injury, spleen_injury, liver_injury,
retroperitoneal_hemorrhage, bladder_injury, kidney_injury, adrenal_injury) %>%
tbl_summary(by = nephrectomy,
statistic = list(all_continuous() ~ "{mean} ({sd})"), # Mean (SD)
# statistic = list(all_continuous() ~ "{median} ({p25}, {p75})"), # Median (IQR)
digits = list(all_continuous() ~ c(1,1))) %>% # Specify # of digits for Mean & SD
add_p(test = list(all_categorical() ~ "chisq.test", all_continuous() ~ "wilcox.test"))
t1 <- kidney_table_final %>%
select(AGE, GENDER, RACE1, Injury_Description, LOSDAYS, Death_di, acs_level,
teaching_status, region, beds, exlap, laparotomy, foley, ct_abdomen, ct_imaging, renal_arteriography, kidney_cath, kidney_repair,
ureterectomy, any_kidney_operation, nephrectomy, other_kidney_operation,
splenectomy, chole, appy, bowel_surgery, vascular_injury, bowel_injury, spleen_injury, liver_injury,
retroperitoneal_hemorrhage, bladder_injury, kidney_injury, adrenal_injury) %>%
tbl_summary(by = nephrectomy,
statistic = list(all_continuous() ~ "{mean} ({sd})"), # Mean (SD)
# statistic = list(all_continuous() ~ "{median} ({p25}, {p75})"), # Median (IQR)
digits = list(all_continuous() ~ c(1,1))) %>% # Specify # of digits for Mean & SD
add_p(test = list(all_categorical() ~ "chisq.test", all_continuous() ~ "wilcox.test")) %>%
bold_labels() %>%
bold_p()
t1
View(kidney_table_final)
kidney_table_final$kidney_injury
t1 <- kidney_table_final %>%
select(AGE, GENDER, RACE1, Injury_Description, LOSDAYS, Death_di, acs_level,
teaching_status, region, beds, exlap, laparotomy, foley, ct_abdomen, ct_imaging, renal_arteriography, kidney_cath, kidney_repair,
ureterectomy, any_kidney_operation, nephrectomy, other_kidney_operation,
splenectomy, chole, appy, bowel_surgery, vascular_injury, bowel_injury, spleen_injury, liver_injury,
retroperitoneal_hemorrhage, bladder_injury, kidney_injury, adrenal_injury) %>%
tbl_summary(by = nephrectomy,
statistic = list(all_continuous() ~ "{mean} ({sd})"), # Mean (SD)
# statistic = list(all_continuous() ~ "{median} ({p25}, {p75})"), # Median (IQR)
digits = list(all_continuous() ~ c(1,1))) %>% # Specify # of digits for Mean & SD
add_p(test = list(all_categorical() ~ "chisq.test", all_continuous() ~ "wilcox.test")) %>%
bold_labels() %>%
bold_p() #%>%
as_gt() %>%
tab_spanner(columns = starts_with("stat_"), md("**Nephrectomy Status**"))
?tbl_summary
kidney_table_final %>%
select(AGE, GENDER, RACE1, Injury_Description, LOSDAYS, Death_di, acs_level,
teaching_status, region, beds, exlap, laparotomy, foley, ct_abdomen, ct_imaging, renal_arteriography, kidney_cath, kidney_repair,
ureterectomy, any_kidney_operation, nephrectomy, other_kidney_operation,
splenectomy, chole, appy, bowel_surgery, vascular_injury, bowel_injury, spleen_injury, liver_injury,
retroperitoneal_hemorrhage, bladder_injury, kidney_injury, adrenal_injury, isolated_renal_injuries) %>%
tbl_summary(by = nephrectomy+isolated_renal_injuries
)
t1 <- kidney_table_final %>%
select(AGE, GENDER, RACE1, Injury_Description, LOSDAYS, Death_di, acs_level,
teaching_status, region, beds, exlap, laparotomy, foley, ct_abdomen, ct_imaging, renal_arteriography, kidney_cath, kidney_repair,
ureterectomy, any_kidney_operation, nephrectomy, other_kidney_operation,
splenectomy, chole, appy, bowel_surgery, vascular_injury, bowel_injury, spleen_injury, liver_injury,
retroperitoneal_hemorrhage, bladder_injury, kidney_injury, adrenal_injury, isolated_renal_injuries) %>%
tbl_summary(by = c(nephrectomy, isolated_renal_injuries)
)
t1 <- kidney_table_final %>%
select(AGE, GENDER, RACE1, Injury_Description, LOSDAYS, Death_di, acs_level,
teaching_status, region, beds, exlap, laparotomy, foley, ct_abdomen, ct_imaging, renal_arteriography, kidney_cath, kidney_repair,
ureterectomy, any_kidney_operation, nephrectomy, other_kidney_operation,
splenectomy, chole, appy, bowel_surgery, vascular_injury, bowel_injury, spleen_injury, liver_injury,
retroperitoneal_hemorrhage, bladder_injury, kidney_injury, adrenal_injury, isolated_renal_injuries) %>%
tbl_summary(by = nephrectomy
)
t1 <- kidney_table_final %>%
select(AGE, GENDER, RACE1, Injury_Description, LOSDAYS, Death_di, acs_level,
teaching_status, region, beds, exlap, laparotomy, foley, ct_abdomen, ct_imaging, renal_arteriography, kidney_cath, kidney_repair,
ureterectomy, any_kidney_operation, nephrectomy, other_kidney_operation,
splenectomy, chole, appy, bowel_surgery, vascular_injury, bowel_injury, spleen_injury, liver_injury,
retroperitoneal_hemorrhage, bladder_injury, kidney_injury, adrenal_injury) %>%
tbl_summary(by = nephrectomy*any_abd_injury
)
?table1
library(table1)
?table1
24809+45614
# Isolated renal injuries stratified by nephrectomy
t2 <- isolated_renal_injuries %>%
select(AGE, GENDER, RACE1, Injury_Description, LOSDAYS, Death_di, acs_level,
teaching_status, region, beds, exlap, laparotomy, foley, ct_abdomen, ct_imaging, renal_arteriography, kidney_cath, kidney_repair,
ureterectomy, any_kidney_operation, nephrectomy, other_kidney_operation,
splenectomy, chole, appy, bowel_surgery, vascular_injury, bowel_injury, spleen_injury, liver_injury,
retroperitoneal_hemorrhage, bladder_injury, kidney_injury, adrenal_injury) %>%
tbl_summary(by = nephrectomy,
statistic = list(all_continuous() ~ "{mean} ({sd})"), # Mean (SD)
# statistic = list(all_continuous() ~ "{median} ({p25}, {p75})"), # Median (IQR)
digits = list(all_continuous() ~ c(1,1))) %>% # Specify # of digits for Mean & SD
add_p(test = list(all_categorical() ~ "chisq.test", all_continuous() ~ "wilcox.test")) %>%
bold_labels() %>%
bold_p() %>%
as_gt() %>%
tab_spanner(columns = starts_with("stat_"), md("**Nephrectomy Status**"))
t3 <- nonisolated_renal_injuries %>%
select(AGE, GENDER, RACE1, Injury_Description, LOSDAYS, Death_di, acs_level,
teaching_status, region, beds, exlap, laparotomy, foley, ct_abdomen, ct_imaging, renal_arteriography, kidney_cath, kidney_repair,
ureterectomy, any_kidney_operation, nephrectomy, other_kidney_operation,
splenectomy, chole, appy, bowel_surgery, vascular_injury, bowel_injury, spleen_injury, liver_injury,
retroperitoneal_hemorrhage, bladder_injury, kidney_injury, adrenal_injury) %>%
tbl_summary(by = nephrectomy,
statistic = list(all_continuous() ~ "{mean} ({sd})"), # Mean (SD)
# statistic = list(all_continuous() ~ "{median} ({p25}, {p75})"), # Median (IQR)
digits = list(all_continuous() ~ c(1,1))) %>% # Specify # of digits for Mean & SD
add_p(test = list(all_categorical() ~ "chisq.test", all_continuous() ~ "wilcox.test")) %>%
bold_labels() %>%
bold_p() %>%
as_gt() %>%
tab_spanner(columns = starts_with("stat_"), md("**Nephrectomy Status**"))
t2
t3
isolated_renal_injuries$region=="Unknown"
length(which(isolated_renal_injuries$region=="Unknown"))
length(which(is.na(isolated_renal_injuries$region))
)
setwd("/Users/david/github/djnusbaum.github.io/")
rmarkdown::render_site()
t.test(nonisolated_renal_injuries$AGE ~ nonisolated_renal_injuries$nephrectomy)
kruskal.test(nonisolated_renal_injuries$AGE ~ nonisolated_renal_injuries$nephrectomy)
wilcox.test(nonisolated_renal_injuries$AGE ~ nonisolated_renal_injuries$nephrectomy)
?wilcox.test
?kruskal.test
a <- glm(nephrectomy ~ isolated_renal_injury, data = kidney_table_final, family = "binomial")
kidney_table_final <- mutate(kidney_table_final, isolated_renal_injury = ifelse(any_abd_injury==1, 0, 1))
a <- glm(nephrectomy ~ isolated_renal_injury, data = kidney_table_final, family = "binomial")
a
summary(a)
exp(cbind(OR=coef(a), confint(a)))
a <- glm(nephrectomy ~ factor(isolated_renal_injury), data = kidney_table_final, family = "binomial")
exp(cbind(OR=coef(a), confint(a)))
a <- glm(nephrectomy ~ any_abd_injury, data = kidney_table_final, family = "binomial")
exp(cbind(OR=coef(a), confint(a)))
a <- glm(nephrectomy ~ isolated_renal_injury, data = kidney_table_final, family = "binomial")
exp(cbind(OR=coef(a), confint(a)))
kidney_table_final <- mutate(kidney_table_final, AGE_Cat = case_when(
is.na(AGE) | AGE<0 ~ "Not reported",
AGE>=0 & AGE <20 ~ "Age less than 20",
AGE>=20 ~ "Age 20 or more"
))
kidney_table_final$AGE_Cat <- factor(kidney_table_final$AGE_Cat)
kidney_table_final$AGE_Cat <- factor(kidney_table_final$AGE_Cat, levels = levels(kidney_table_final$AGE_Cat)[c(2,1,3)])
kidney_table_final <- mutate(kidney_table_final, SBP_Cat = case_when(
SBP<0 ~ "Unknown",
SBP<90 ~ "<90",
SBP>=90 & SBP <=140 ~ "90-140",
SBP>140 ~ "≥140"
))
kidney_table_final$SBP_Cat <- factor(kidney_table_final$SBP_Cat)
kidney_table_final$SBP_Cat <- factor(kidney_table_final$SBP_Cat, levels = levels(kidney_table_final$SBP_Cat)[c(3,1,2,4)])
kidney_glm <- glm(nephrectomy ~ Age_Cat + GENDER + ois_4_or_5 + SBP_Cat + Type + any_abd_injury, data = kidney_table_final, family="binomial")
a <- summary(kidney_glm)
b <- as.data.frame(exp(cbind(OR=coef(kidney_glm), confint(kidney_glm))))
b$or_ci <- paste0(sprintf("%.3f", b$OR)," (",sprintf("%.3f", b$`2.5 %`),"-",sprintf("%.3f",b$`97.5 %`),")")
b$p <- sprintf("%.3f",a$coefficients[,4]) # Add p-values
View(b)
View(b)
kidney_glm <- glm(nephrectomy ~ Age_Cat + GENDER + Injury_Description + SBP_Cat + Type + any_abd_injury, data = kidney_table_final, family="binomial")
a <- summary(kidney_glm)
b <- as.data.frame(exp(cbind(OR=coef(kidney_glm), confint(kidney_glm))))
b$or_ci <- paste0(sprintf("%.3f", b$OR)," (",sprintf("%.3f", b$`2.5 %`),"-",sprintf("%.3f",b$`97.5 %`),")")
b$p <- sprintf("%.3f",a$coefficients[,4]) # Add p-values
View(b)
kidney_glm <- glm(nephrectomy ~ Age_Cat + GENDER + ois_4_or_5 + SBP_Cat + Type + isolated_renal_injury, data = kidney_table_final, family="binomial")
a <- summary(kidney_glm)
b <- as.data.frame(exp(cbind(OR=coef(kidney_glm), confint(kidney_glm))))
b$or_ci <- paste0(sprintf("%.3f", b$OR)," (",sprintf("%.3f", b$`2.5 %`),"-",sprintf("%.3f",b$`97.5 %`),")")
b$p <- sprintf("%.3f",a$coefficients[,4]) # Add p-values
View(b)
library(geepack)
library(gee)
gee(nephrectomy ~ Type, family="binomial", data = kidney_table_final, id = FAC_KEY)
geese(nephrectomy ~ Type, id=FAC_KEY, data=isolated_renal_injuries, family="binomial", corstr="exch", scale.fix=FALSE)
fit <- gee(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = gaussian, corstr = "independence")
summary(fit)
test_table <- as.data.frame(fit$coefficients)
test_table[,1]
exp(test_table[,1])
glm_comparison <- glm(nephrectomy ~ factor(Type), data = kidney_table_final, family = "binomial")
a <- summary(glm_comparison)
as.numeric(a$coefficients[,1])
exp(as.numeric(a$coefficients[,1]))
fit <- gee(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = binomial, corstr = "independence")
exp(test_table[,1])
fit$coefficients
fit$coefficients[1]
exp(-3.779263)
exp(1.582038)
citab <- with(as.data.frame(cc),
cbind(lwr=Estimate-1.96*Std.err,
upr=Estimate+1.96*Std.err))
fit <- geeglm(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = binomial, corstr = "independence")
summary(fit)
exp(fit$coefficients)
glm_comparison <- glm(nephrectomy ~ factor(Type), data = kidney_table_final, family = "binomial")
a <- summary(glm_comparison)
exp(as.numeric(a$coefficients[,1]))
a$coefficients
exp(as.numeric(a$coefficients[,1]))
summary(fit)
exp(fit$coefficients)
glm_comparison <- glm(nephrectomy ~ factor(Type), data = kidney_table_final, family = "binomial")
a <- summary(glm_comparison)
exp(as.numeric(a$coefficients[,1]))
a$coefficients
?geeglm
fit <- gee(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = binomial, corstr = "independence")
summary(fit)
test_table <- as.data.frame(fit$coefficients)
fit$coefficients
exp(fit$coefficients)
fit <- geeglm(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = binomial, corstr = "independence")
summary(fit)
exp(fit$coefficients) # Lists the ORs
fit <- gee(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = gaussian, corstr = "independence")
exp(fit$coefficients) # Lists the ORs
fit <- gee(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = poisson, corstr = "independence")
exp(fit$coefficients) # Lists the ORs
glm_comparison <- glm(nephrectomy ~ factor(Type), data = kidney_table_final, family = "gaussian")
a <- summary(glm_comparison)
exp(as.numeric(a$coefficients[,1]))
library(geese)
?geese
?geeglm
fit<-geese(nephrectomy ~ Type, id=FAC_KEY, data=kidney_table_final, family="gaussian", corstr="exch", scale.fix=FALSE)
exp(fit$coefficients)
fit$coefficients
fit
fit$beta
exp(fit$beta)
fit <- geeglm(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = gaussian, corstr = "independence")
summary(fit)
exp(fit$coefficients) # Lists the ORs
fit<-geese(nephrectomy ~ Type, id=FAC_KEY, data=kidney_table_final, family="gaussian", corstr="exch", scale.fix=FALSE)
exp(fit$beta)
fit <- geeglm(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = gaussian, corstr = "independence")
exp(fit$coefficients) # Lists the ORs
glm_comparison <- glm(nephrectomy ~ factor(Type), data = kidney_table_final, family = "binomial")
a <- summary(glm_comparison)
exp(as.numeric(a$coefficients[,1]))
a$coefficients
fit <- gee(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = binomial, corstr = "independence")
exp(fit$coefficients) # Lists the ORs
fit <- geeglm(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = binomial, corstr = "independence")
exp(fit$coefficients) # Lists the ORs
fit<-geese(nephrectomy ~ Type, id=FAC_KEY, data=kidney_table_final, family="binomial", corstr="exch", scale.fix=FALSE)
exp(fit$beta)
fit<-geese(nephrectomy ~ Type, id=FAC_KEY, data=kidney_table_final, family="binomial", corstr="independence", scale.fix=FALSE)
exp(fit$beta)
kidney_table_final <- kidney_table_final %>%
arrange(FAC_KEY, INC_KEY)
fit <- gee(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = binomial, corstr = "independence")
exp(fit$coefficients) # Lists the ORs
fit <- geeglm(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = binomial, corstr = "independence")
exp(fit$coefficients) # Lists the ORs
fit <- gee(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = binomial, corstr = "independence")
coef(summary(fit)) # Lists the ORs
fit <- geeglm(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = binomial, corstr = "independence")
exp(fit$coefficients) # Lists the ORs
fit<-geese(nephrectomy ~ Type, id=FAC_KEY, data=kidney_table_final, family="binomial", corstr="independence", scale.fix=FALSE)
exp(fit$beta)
?geepack::QIC()
QIC(fit)
fit <- geeglm(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = binomial, corstr = "independence")
QIC(fit)
fit1 <- geeglm(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = binomial, corstr = "independence")
fit2 <- geeglm(as.numeric(nephrectomy) ~ factor(Type), id=FAC_KEY, data = kidney_table_final, family = binomial, corstr = "exchangeable")
QIC(c(fit1,fit2)) # Used to select correlation structure (Smaller value of CIC  or QICu is preferred)
QIC(fit1) # Used to select correlation structure (Smaller value of CIC  or QICu is preferred)
QIC(fit2)
exp(fit2$coefficients) # Lists the ORs
?geeglm
exp(fit2$coefficients) # Lists the ORs
glm_comparison <- glm(nephrectomy ~ factor(Type), data = kidney_table_final, family = "binomial")
a <- summary(glm_comparison)
exp(as.numeric(a$coefficients[,1]))
fit.glm <- glm(nephrectomy ~ factor(Age_Cat) + factor(GENDER) + factor(ois_4_or_5) + factor(SBP_Cat) + factor(Type) + factor(isolated_renal_injury), data = kidney_table_final, family = "binomial")
summary(fit.glm)
coef(fit.glm)
exp(coef(fit.glm))
exp(cbind(OR=coef(fit.glm), confint(fit.glm)))
fit.gee <- geeglm(nephrectomy ~ factor(Age_Cat) + factor(GENDER) + factor(ois_4_or_5) + factor(SBP_Cat) + factor(Type) + factor(isolated_renal_injury), id=FAC_KEY, data = kidney_table_final, family = binomial, corstr = "exchangeable")
exp(cbind(OR=coef(fit.gee), confint(fit.gee)))
confint(fit.gee)
coef(summary(fit.gee))
summary(fit.gee)
coef(summary(fit.gee))
coef(summary(fit.gee))[,1]
exp(coef(summary(fit.gee))[,1])
cbind(exp(coef(summary(fit.gee))[,1]),coef(summary(fit.gee))[,2:4])
cbind(OR=exp(coef(summary(fit.gee))[,1]),coef(summary(fit.gee))[,2:4])
exp(cbind(OR=coef(fit.glm), confint(fit.glm)))
broom::tidy(fit.gee, conf.int = TRUE)
broom::tidy(fit.gee, exponentiate = TRUE, conf.int = TRUE)
cbind(OR=exp(coef(summary(fit.gee))[,1]),coef(summary(fit.gee))[,2:4])
broom::tidy(fit.gee, exponentiate = TRUE, conf.int = TRUE)
broom::tidy(fit.gee, exponentiate = TRUE, conf.int = TRUE)[,c(1,5,6,4)]
broom::tidy(fit.gee, exponentiate = TRUE, conf.int = TRUE)[,c(1,2,6,7,5)]
broom::tidy(fit.glm, exponentiate = TRUE, conf.int = TRUE)[,c(1,2,6,7,5)]
gee.results <- as.data.frame(broom::tidy(fit.gee, exponentiate = TRUE, conf.int = TRUE)[,c(1,2,6,7,5)])
glm.results <- as.data.frame(broom::tidy(fit.glm, exponentiate = TRUE, conf.int = TRUE)[,c(1,2,6,7,5)])
View(gee.results)
View(glm.results)
cite(geepack)
citation(geepack)
citation("geepack")
devtools::install_github("PratheepaJ/bootLong")
install.packages("BiocParallel")
BiocManager::install("BiocParallel")
BiocManager::install("DESeq2")
BiocManager::install("limma")
devtools::install_github("PratheepaJ/bootLong")
library(bootLong)
fit.gee.indep <- geeglm(nephrectomy ~ factor(Age_Cat) + factor(GENDER) + factor(ois_4_or_5) + factor(SBP_Cat) + factor(Type) + factor(isolated_renal_injury), id=FAC_KEY, data = kidney_table_final, family = binomial, corstr = "independence")
cbind(OR=exp(coef(summary(fit.gee.indep))[,1]),coef(summary(fit.gee.indep))[,2:4])
gee.indep.results <- as.data.frame(broom::tidy(fit.gee.indep, exponentiate = TRUE, conf.int = TRUE)[,c(1,2,6,7,5)])
View(gee.indep.results)
confint.geeglm <- function(object, parm, level = 0.95, ...) {
cc <- coef(summary(object))
mult <- qnorm((1+level)/2)
citab <- with(as.data.frame(cc),
cbind(lwr=Estimate-mult*Std.err,
upr=Estimate+mult*Std.err))
rownames(citab) <- rownames(cc)
citab[parm,]
}
confint(fit)
confint.geeglm(fit.gee)
exp(confint.geeglm(fit.gee))
exp(confint.geeglm(fit.gee.indep))
unique(kidney_table_final$GCS_Q1)
table(kidney_table_final$EDDISP)
table(kidney_table_final$EDDISP,kidney_table_final$any_abd_injury)
table(kidney_table_final$EDDEATH,kidney_table_final$any_abd_injury)
setwd("/Users/david/github/djnusbaum.github.io/")
rmarkdown::render_site()
